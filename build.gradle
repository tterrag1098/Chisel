buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }

}

apply plugin: 'forge'
version = "1.5.8"
group = "info.jbcs.minecraft.chisel" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Chisel"

minecraft {
    version = "1.7.10-10.13.0.1207"
    runDir = "run"

    replaceIn "Chisel.java"
    replace "@MOD_VERSION@", project.version
}

repositories {
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "ProfMobius"
        url = "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    compile 'mcp.mobius.waila:Waila:1.5.3_1.7.10:dev'
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// some crazy stuff to make sure the chicken stuff is in the mods folder...
// because it wont work otherwise...  because FML doesnt laod coremods from the classpath
task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.compile }
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file(minecraft.runDir + "/mods")

    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
tasks.setupDevWorkspace.dependsOn copyChicken
tasks.setupDecompWorkspace.dependsOn copyChicken

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create source attachment for dev jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}
